% linux,windows,tool,git

# 推送所有标签 pull all tags
git push --tags

# 删除本地标签 remove tags locally
git tag -d <tag_name>

# 删除远程标签 remove tags remote
git push <remote> --delete <tag_name>

# 创建同时切换分支 create and switch branch
git checkout -b <branch-name>

# 查看各个分支指向的对象 view branch point
git log --decorate --oneline

# 删除分支 remove branch
git branch -d <branch_name>

# 查看当前分支已经合并的分支 view current branch merged
git branch --merged

# 查看当前分支没有合并的分支 view current no merged
git branch --no-merged

# 删除远程分支 remove remote branch
git push <remote> --delete <branch_name>

# git 变基 rebase branch
git rebase <from-branch> <to-branch>

# git 变基特殊分支, 取出 from-branch 分支和 diff-branch 不同的部分变基到 to-branch rebase onto
git rebase --onto <to-branch> <diff-branch> <from-branch>

# git 应用特定commit 到当前分支上 git cherry-pick
git cherry-pick <commit_id>

# 交互式 rebase git rebase  interactive
git rebase -i <commit-ranger>

# git 撤销修改 git resest
git reset <relative-commit>

# git 撤销修改 git revert
git revert <relative-commit>

# git 查看头指针移动日志
git reflog

# git 查看引用日志同时显示对比 git reflog
git reflog -p 

# 交互式暂存 git add interactive
git add -i 

# 补丁式添加文件 git add file patched
git add -p

# git 贮藏修改 git stash
git stash

#  查看贮藏栈 view git stash
git stash list

# git 弹出修改 git stash pop
git stash pop

# git 应用贮藏栈中的修改 git stash apply 
git stash apply <stash-number>
$ stash-number: echo 'stash@{0}'

# git 应用贮藏栈中的修改同时恢复暂存文件的状态 git apply stash and tracked
git stash pop --index

# git 删除贮藏 git remove stash
git stash drop <stash_name>

# 通过一个贮藏创建一个分支 create a branch from a stash
git stash branch <new-branch>

# 移除所有没有忽略且未追踪的文件 remove all untracked files
git clean

# 移除所有没有忽略未或者追踪的文件 remove all untracked and ignore files
git clean -x

# 查看 git clean 将要移除的文件 view git clena will remove files
git clean -n

# 将所有未追踪的文件放入栈 push all untracked file
git stash --all

# 对合并提交签名 sign merge sign
git merge -S

# git reset 同时覆盖工作区 git reset hard workspace
git reset --hard <commit-sha256>

# git reset 合并提交 git reset merge multi commit
git reset --soft <number>

# 中断合并 git abort merge
git merge --abort

# 开始二分查找 git Binary search
git bisect start

# 退出二分查找 exit git binary search
git bisect reset

# 添加子模块 add git submodule
git submodule add <url>

# 初始化子模块配置文件 init submodule config
git submodule init

# 拉取子模块 pull submodule
git submodule update

# 克隆仓库包括子模块 clone repo include submodule
git clone <url> --recurse-submodule 

# 切换到包含子模块的分支 checkout branch with submodule
git checkout <branch_name> --recurse-submodule

# 打包一个仓库分支 bundle a repo branch
git bundle create <file_name>  HEAD <branch_name>

# 从 bundle 文件中解包 clone repo from file
git clone <file_name> <folder>

# 比较最新版本库和工作区的差异 diff workspace and local repo
git diff HEAD

# 丢弃工作目录中的所有修改 drop all file change
git reset --hard HEAD

# 丢弃工作目录中特定文件的修改 drop specific file change
git checkout HEAD <file> 

# 取消所有文件的暂存 drop all staged file
git reset HEAD

# git 覆盖远程分支 git push force
git push --force

# 设置跟踪分支 set tracked branch
git branch -u <remote> <branch_name>

# 检测空白问题 git diff withespace
git diff --check

# 制作 path make a git format patch
git format-patch <commit>

# 应用 patch apply patch
git apply <pathch-file>

# 清除没有 tracked 的文件, 不会删除 .gitignore 中的文件
git clean -f

# 清除没有 tracked 的文件， 包括 .gitignore 中的文件
git clean -fx

# 创建分支， 不跳转
git branch <branch_name>

# 创建分支， 跳转
git checkout -b <branch_name>

# 设置跟踪分支同时进行推送
git push --set-upstrean <remote_manche> <branch_name>

# 统计代码提交数量
git log --format='%aN' | sort -u | while read name; do echo -en "$name\t"; git log --author="$name" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "added lines: %s, removed lines: %s, total lines: %s ", add, subs, loc }' -; done

# 强制远程分支覆盖本地分支
git reset --hard origin/master


# git log 显示每次添加或者删除的代码行数
git log --stat
