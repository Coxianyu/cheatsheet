% linux,windows,tool,git

# 比较工作区与暂存区的差异 diff workspace and staged
git diff 

# 比较已提交和暂存区的差别 diff commit and staged
git diff --staged

# git status 简洁输出 git status shortly
git status -s

# 直接提交已经跟踪的文件 commit all tracked file
git commit -a

# 从git中删除文件， 同时取消追踪 remove from git and disk
git rm <file>

# 从git库中删除文件， 但是不在磁盘上删除  just remove git 
git rm --cached <file>

# 对文件改名 git rename
git mv <file_from> <file_to>

# 显示 git 日志 show git log
git log

# 显示签名
git log --show-signature

# 显示 git 日志和每次的变化 show git log patch
git log -p

# 显示最近提交 show git log recently
git log -<number>

# 以 ascii 字符串显示分支合并历史 show git log graph
git log --graph

# 以时间选择提交历史 show git log in a time range
git log --since=<start-time> --until=<end-time>

#  只显示添加或者删除某个字符串的提交  show git log add or delete a string
git log -S <string>

# 只显示提交说明中匹配某个字符串的提交 show git log a specific string in commit
git log --grep <string>

# 不显示 merges 产生的commit show git log no merges
git log --no-merges

# 提交后未作任何改变可以重新提交，快照不变 recommit when no modify 
git commit --amend 

# 取消暂存  cancel staged
git restore --staged <file>

# 恢复为上次提交的状态 rrestore file to last commit
git checkout -- <file>

# 显示远程仓库 list remote repository
git remote -v

# 详细显示远程仓库 list remote detail
git remote shwo <remote>

# 添加远程仓库 add remote repository
git remote add <name> <url>

# 抓取远程仓库 fetch remote repository
git fetch <remote>

# 重命名远程仓库 rename remote  repository
git remote rename <remote> <new_name>

# 删除远程仓库 remote remote repository
git remote remove <remote> 

$remote:git remote ---

# 查看标签 list tags
git tag

# 通过通配符显示标签 list tag use wildcard
git tag -l "<tag_name>"

# 打标签 tag a commit
git tag -a <version> -m <comment>

# 打标签的同时签名  tag and sign a comment
git tag -s <version> -m <comment>

# 验证 tag 的签名 verify tag sign
git tag -v <tag_name>

# 显示标签 show tags
git show <tag_name>
$tag_name: git tag --- --preview "git show {}"

# 给过去的提交打标签 tags previous commit
git tag -a <tag-name> <commit-sha256>
$commit-sha256: git log --oneline |cut -d ' ' -f 1  --- --preview="git show {}"


# 推送一个标签push on tag push on tag
git push <remote> <tag_name>

# 推送所有标签 pull all tags
git push --tags

# 删除本地标签 remove tags locally
git tag -d <tag_name>

# 删除远程标签 remove tags remote
git push <remote> --delete <tag_name>

# 创建同时切换分支 create and switch branch
git checkout -b <branch-name>

# 查看各个分支指向的对象 view branch point
git log --decorate --oneline

# 切换分支 switch to branch:
git checkout <branch_name>

$branch_name: git branch -v | tr -d '\*' | awk 'BEGIN {printf("%-20s%-20s%-20s\n","branch_name","commit_sha","commit")}{printf("%-20s%-20s%-20s\n",$1,$2,$3)}' --- --headers 1 --column 1
$from-branch: git branch -v | tr -d '\*' | awk 'BEGIN {printf("%-20s%-20s%-20s\n","branch_name","commit_sha","commit")}{printf("%-20s%-20s%-20s\n",$1,$2,$3)}' --- --headers 1 --column 1
$to-branch: git branch -v | tr -d '\*' | awk 'BEGIN {printf("%-20s%-20s%-20s\n","branch_name","commit_sha","commit")}{printf("%-20s%-20s%-20s\n",$1,$2,$3)}' --- --headers 1 --column 1
$diff-branch: git branch -v | tr -d '\*' | awk 'BEGIN {printf("%-20s%-20s%-20s\n","branch_name","commit_sha","commit")}{printf("%-20s%-20s%-20s\n",$1,$2,$3)}' --- --headers 1 --column 1

# 删除分支 remove branch
git branch -d <branch_name>

# 查看当前分支已经合并的分支 view current branch merged
git branch --merged

# 查看当前分支没有合并的分支 view current no merged
git branch --no-merged

# 删除远程分支 remove remote branch
git push <remote> --delete <branch_name>

# git 变基 rebase branch
git rebase <from-branch> <to-branch>

# git 变基特殊分支, 取出 from-branch 分支和 diff-branch 不同的部分变基到 to-branch rebase onto
git rebase --onto <to-branch> <diff-branch> <from-branch>

# git 应用特定commit 到当前分支上 git cherry-pick
git cherry-pick <commit_id>

# 交互式 rebase git rebase  interactive
git rebase -i <commit-ranger>

# git 撤销修改 git resest
git reset <relative-commit>

# git 撤销修改 git revert
git revert <relative-commit>

# git 查看引用日志
git reflog

# git 查看引用日志同时显示对比 git reflog
git reflog -p 

# 交互式暂存 git add interactive
git add -i 

# 补丁式添加文件 git add file patched
git add -p

# git 贮藏修改 git stash
git stash

#  查看贮藏栈 view git stash
git stash list

# git 弹出修改 git stash pop
git stash pop

# git 应用贮藏栈中的修改 git stash apply 
git stash apply <stash-number>
$ stash-number: echo 'stash@{0}'

# git 应用贮藏栈中的修改同时恢复暂存文件的状态 git apply stash and tracked
git stash pop --index

# git 删除贮藏 git remove stash
git stash drop <stash_name>

# 通过一个贮藏创建一个分支 create a branch from a stash
git stash branch <new-branch>

# 移除所有没有忽略且未追踪的文件 remove all untracked files
git clean

# 移除所有没有忽略未或者追踪的文件 remove all untracked and ignore files
git clean -x

# 查看 git clean 将要移除的文件 view git clena will remove files
git clean -n

# 将所有未追踪的文件放入栈 push all untracked file
git stash --all

# 对合并提交签名 sign merge sign
git merge -S

# git reset 同时覆盖工作区 git reset hard workspace
git reset --hard <commit-sha256>

# git reset 合并提交 git reset merge multi commit
git reset --soft <number>

# 中断合并 git abort merge
git merge --abort

# 开始二分查找 git Binary search
git bisect start

# 退出二分查找 exit git binary search
git bisect reset

# 添加子模块 add git submodule
git submodule add <url>

# 初始化子模块配置文件 init submodule config
git submodule init

# 拉取子模块 pull submodule
git submodule update

# 克隆仓库包括子模块 clone repo include submodule
git clone <url> --recurse-submodule 

# 切换到包含子模块的分支 checkout branch with submodule
git checkout <branch_name> --recurse-submodule

# 打包一个仓库分支 bundle a repo branch
git bundle create <file_name>  HEAD <branch_name>

# 从 bundle 文件中解包 clone repo from file
git clone <file_name> <folder>

# 比较最新版本库和工作区的差异 diff workspace and local repo
git diff HEAD
